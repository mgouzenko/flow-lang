channel<int> chan_at(list<channel<int>> l, int n) {
	int i;
	list<channel<int>> cur = l;
	for(i = 0; i < n; i = i + 1) {
		cur = ^cur;
	}
	return @cur;

	if((i - 1) != n) {
		print_string("Something is very wrong...\n");
	}
}

proc comparator (in int a_in, in int b_in, out int a_out, out int b_out, bool ascending) {
	while(a_in && b_in) {
		int larger;
		int smaller;

		int a = @a_in;
		int b = @b_in;
		
		if (a < b) {
			smaller = a;
			larger = b;
		} else {
			smaller = b;
			larger = a;
		}

		if(ascending) {
			smaller -> a_out;
			larger -> b_out;
		} else {
			larger -> a_out;
			smaller -> b_out;
		}
	}
	poison a_out;
	poison b_out;
}

void bitonic_comp_network (int n, bool ascending, list<channel<int>> input_chans, list<channel<int>> output_chans) {
	int i = 0;
	int j = (n / 2);

	while(i < n / 2) {

		//print_string("a: "); print_int(i); println();
		//print_string("b: "); print_int(j); println();
		//println();
		//println();
		comparator(chan_at(input_chans, i), chan_at(input_chans, j), 
				   chan_at(output_chans, i), chan_at(output_chans, j), ascending);

		i = i + 1;
		j = j + 1;
	}
}

void bitonic_merger (int n, bool ascending, list<channel<int>> input_chans, list<channel<int>> output_chans) {

	if(n == 2) {
		comparator(chan_at(input_chans, 0), chan_at(input_chans, 1), 
				   chan_at(output_chans, 0), chan_at(output_chans, 1), ascending);
		return;
	}

	int i;

	list<channel<int>> intermediate_chans;
	for (i = 0; i < n; i = i + 1) {
		channel<int> l;
		intermediate_chans = l::intermediate_chans;
	}

	list<channel<int>> intermediate_chans_top;
	for (i = n/2 - 1; i >= 0; i = i - 1) {
		intermediate_chans_top = chan_at(intermediate_chans, i)::intermediate_chans_top;
	}
	list<channel<int>> intermediate_chans_bottom;
	for (i = n - 1; i >= n/2; i = i - 1) {
		intermediate_chans_bottom = chan_at(intermediate_chans,i)::intermediate_chans_bottom;
	}

	list<channel<int>> bitonic_outputs_top;
	for(i = n/2 - 1; i >= 0; i = i - 1) {
		bitonic_outputs_top = chan_at(output_chans, i)::bitonic_outputs_top;
	}
	list<channel<int>> bitonic_outputs_bottom;
	for (i = n - 1; i >= n/2; i = i - 1) {
		bitonic_outputs_bottom = chan_at(output_chans, i)::bitonic_outputs_bottom;
	}

	bitonic_comp_network(n, ascending, input_chans, intermediate_chans);
	bitonic_merger(n/2, ascending, intermediate_chans_top, bitonic_outputs_top);
	bitonic_merger(n/2, ascending, intermediate_chans_bottom, bitonic_outputs_bottom);
}

void bitonic_sorter (int n, bool ascending, list<channel<int>> input_chans, list<channel<int>> output_chans) {
	if(n == 2) {
		comparator(chan_at(input_chans, 0), chan_at(input_chans, 1), 
				   chan_at(output_chans, 0), chan_at(output_chans, 1), ascending);
		return;
	}

	int i;

	list<channel<int>> bitonic_inputs_top;
	for(i = n/2 - 1; i >= 0; i = i - 1) {
		bitonic_inputs_top = chan_at(input_chans,i)::bitonic_inputs_top;
	}
	list<channel<int>> bitonic_inputs_bottom;
	for (i = n - 1; i >= n/2; i = i - 1) {
		bitonic_inputs_bottom = chan_at(input_chans, i)::bitonic_inputs_bottom;
	}

	list<channel<int>> intermediate_chans;
	for (i = 0; i < n; i = i + 1) {
		channel<int> l;
		intermediate_chans = l::intermediate_chans;
	}

	list<channel<int>> intermediate_chans_top;
	for (i = n/2 - 1; i >= 0; i = i - 1) {
		intermediate_chans_top = chan_at(intermediate_chans, i)::intermediate_chans_top;
	}
	list<channel<int>> intermediate_chans_bottom;
	for (i = n - 1; i >= n/2; i = i - 1) {
		intermediate_chans_bottom = chan_at(intermediate_chans, i)::intermediate_chans_bottom;
	}

	bitonic_sorter(n/2, ascending, bitonic_inputs_top, intermediate_chans_top);
	bitonic_sorter(n/2, !ascending, bitonic_inputs_bottom, intermediate_chans_bottom);
	bitonic_merger(n, ascending, intermediate_chans, output_chans);
}

proc muxer2_1(in int a, in int b, out int out_chan, int repeats_per_input) {
	int count;
	bool done = false;
	while(!done) {
		
		count = 0;
		while(count < repeats_per_input) {
			if(a) {
				@a -> out_chan;
				count = count + 1;
			} else { done = true; break; }
		} 

		count = 0;
		while(count < repeats_per_input) {
			if(b) {
				@b -> out_chan;
				count = count + 1;
			} else { done = true; break; }
		} 
	}
	poison out_chan;
}

proc demuxer1_2(in int in_chan, out int a, out int b) {
	while(true){
		if(in_chan) {
			@in_chan -> a;
		} else { break; }

		if(in_chan) {
			@in_chan -> b;
		} else { break; }
	}
	poison a;
	poison b;
}

list<channel<int>> demuxer(int n, channel<int> in_chan) {
	if(n == 2) {
		channel<int> a;
		channel<int> b;
		list<channel<int>> l;
		l = b::l;
		l = a::l;
		demuxer1_2(in_chan, a, b);
		return l;
	}

	channel<int> intermediate_chan_a;
	channel<int> intermediate_chan_b;

	// Get the output channels
	list<channel<int>> top_chans = demuxer(n/2, intermediate_chan_a);
	list<channel<int>> bottom_chans = demuxer(n/2, intermediate_chan_b);

	// Create the intermediary demuxer
	demuxer1_2(in_chan, intermediate_chan_a, intermediate_chan_b);

	// Combine the lists of output channels
	int i;
	list<channel<int>> combined_chan_list;
	for(i = #bottom_chans - 1; i >= 0; i = i - 1) {
		combined_chan_list = chan_at(bottom_chans, i)::combined_chan_list;
	}
	for(i = #top_chans - 1; i >= 0; i = i - 1) {
		combined_chan_list = chan_at(top_chans, i)::combined_chan_list;
	}

	return combined_chan_list;
}

channel<int> muxer(int n, list<channel<int>> in_chans) {
	if(n == 2) {
		channel<int> output_chan;
		muxer2_1(chan_at(in_chans, 0), chan_at(in_chans, 1), output_chan, n/2);
		return output_chan;
	}

	// Split the input channel list into two
	int i;
	list<channel<int>> top_chans;
	for(i = n/2 - 1; i >= 0; i = i - 1) {
		top_chans = chan_at(in_chans, i)::top_chans;
	}
	list<channel<int>> bottom_chans;
	for(i = n - 1; i >= n/2; i = i - 1) {
		bottom_chans = chan_at(in_chans, i)::bottom_chans;
	}

	channel<int> output_chan;
	muxer2_1(muxer(n/2, top_chans), muxer(n/2, bottom_chans), output_chan, n/2);

	return output_chan;
}

proc printer(in int n) {
	while(n) {
		print_int(@n);
		println();
	}
}

proc num_gen(out int nums) {
	2 -> nums;
	59 -> nums;
	4 -> nums;
	13 -> nums;
	2 -> nums;
	1 -> nums;
	9 -> nums;
	18 -> nums;
	2 -> nums;
	15 -> nums;
	4 -> nums;
	7 -> nums;
	21 -> nums;
	1 -> nums;
	29 -> nums;
	3 -> nums;

	poison nums;
}


int main() {
	channel<int> sorter_input;
	channel<int> sorter_output;

	int INPUT_SIZE = 16;

	list<channel<int>> sorter_input_wires = demuxer(INPUT_SIZE, sorter_input);

	int i;
	list<channel<int>> sorter_output_wires;
	for (i = 0; i < INPUT_SIZE; i = i + 1) {
		channel<int> c;
		sorter_output_wires = c::sorter_output_wires;
	}

	sorter_output = muxer(INPUT_SIZE, sorter_output_wires);

	bitonic_sorter(INPUT_SIZE, true, sorter_input_wires, sorter_output_wires);
	
	num_gen(sorter_input);
	printer(sorter_output);
}